/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/5aGCebubyqM
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useState } from "react";
import { generateJWT } from "@/lib/jwt";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

async function getAccount(): Promise<string | undefined> {
  const accounts = await (window as any)?.mina?.requestAccounts();
  console.log("Accounts", accounts);
  let address: string | undefined = undefined;
  if (accounts?.code === undefined && accounts?.length > 0) {
    address = accounts[0];
    console.log("Address", address);
  }
  return address;
}

export default function JWT() {
  const [publicAddress, setPublicAddress] = useState("");
  const [jwtKey, setJwtKey] = useState("");
  const handleGenerateJWT = async () => {
    const publicAddress = await getAccount();
    if (!publicAddress) return;
    setPublicAddress(publicAddress);
    const newJwtKey = await generateJWT(publicAddress);
    setJwtKey(newJwtKey);
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Your Account</CardTitle>
        <CardDescription>
          Manage your public address and JWT key.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="publicAddress">Public Address</Label>
          <Input
            id="publicAddress"
            value={publicAddress}
            readOnly
            className="cursor-copy"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="jwtKey">JWT Key</Label>
          <Input id="jwtKey" value={jwtKey} readOnly className="cursor-copy" />
        </div>
      </CardContent>
      <CardFooter>
        <Button onClick={handleGenerateJWT} className="w-full">
          Generate JWT
        </Button>
      </CardFooter>
    </Card>
  );
}
