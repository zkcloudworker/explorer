"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/2SrYseorKWc
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Rubik } from 'next/font/google'
import { Cormorant_Garamond } from 'next/font/google'

rubik({
  subsets: ['latin'],
  display: 'swap',
})

cormorant_garamond({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  TableHead,
  TableRow,
  TableHeader,
  TableCell,
  TableBody,
  Table,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Tooltip, TooltipProvider } from "@/components/ui/tooltip";
import Image from "next/image";
import { useState, useEffect, useRef } from "react";
import { PagesList } from "@/components/pages-list";
import { searchJobs } from "@/lib/search";
import { connect, NatsConnection, KV } from "nats.ws";

export default function Explorer() {
  const [hits, setHits] = useState<any[]>([]);
  const [hitsPerPage, setHitsPerPage] = useState<number>(20);
  const [currentPage, setCurrentPage] = useState<number>(0);
  const [totalPages, setTotalPages] = useState<number>(0);
  const [pageSizes, setPageSizes] = useState<number[]>([10, 20, 50, 100, 200]);
  const [totalHits, setTotalHits] = useState<number>(0);
  const [searchQuery, setSearchQuery] = useState<string>("");
  const [nc, setNc] = useState<NatsConnection | undefined>(undefined);

  const hitsPerPageRef = useRef<number>(hitsPerPage);

  // Update the ref whenever hitsPerPage changes
  useEffect(() => {
    hitsPerPageRef.current = hitsPerPage;
  }, [hitsPerPage]);

  const searchQueryRef = useRef<string>(searchQuery);

  useEffect(() => {
    searchQueryRef.current = searchQuery;
  }, [searchQuery]);

  function findIndex(prevHits: any[], jobId: string): number {
    return prevHits.findIndex((item) => item.jobId === jobId);
  }

  useEffect(() => {
    function updateJob(item: any, key: string) {
      //console.log("updateJob", { key, item });
      setHits((prevHits) => {
        const index = findIndex(prevHits, item.jobId);
        let newHits: any[] = [];

        if (key === "zkcloudworker.job") {
          if (
            index === -1 &&
            JSON.stringify(item).includes(searchQueryRef.current)
          ) {
            newHits = [item, ...prevHits];
          } else if (index !== -1) {
            newHits = [...prevHits];
            newHits[index] = item;
          } else newHits = prevHits;
        } else if (key === "zkcloudworker.jobStatus" && index !== -1) {
          newHits = [...prevHits];
          newHits[index].jobStatus = item.jobStatus;
        } else newHits = prevHits;
        const truncatedHits = newHits.slice(0, hitsPerPageRef.current);
        setHits(truncatedHits);
        return truncatedHits;
      });
    }

    async function watch(kv: KV, keys: string[]) {
      const iter = await kv.watch({ key: keys });

      for await (const e of iter) {
        const item = JSON.parse(e.string());
        updateJob(item, e.key);
      }
    }

    async function search(query: string): Promise<void> {
      const { hits, nbHits, nbPages, page } = await searchJobs({
        query,
        hitsPerPage,
        currentPage,
      });

      setHits(hits);
      setCurrentPage(page);
      setTotalPages(nbPages);
      setTotalHits(nbHits);
      if (nc === undefined) {
        const nc = await connect({
          servers: process.env.NEXT_PUBLIC_NATS_SERVER,
        });
        setNc(nc);
        const js = nc.jetstream();
        const kv = await js.views.kv("profiles");
        watch(kv, ["zkcloudworker.job", "zkcloudworker.jobStatus"]);
      }
    }
    search(searchQuery);
  }, [searchQuery, hitsPerPage, currentPage, nc]);

  function onChangeHitsPerPage(hitsPerPage: number): void {
    setHitsPerPage(hitsPerPage);
  }

  function onChangePage(page: number): void {
    setCurrentPage(page);
  }

  function handleFormSubmit(e: any): void {
    e.preventDefault();
  }

  return (
    <>
      <header className="dark:invert flex items-center justify-between h-16 px-4 md:px-6 bg-[#f0f0f0] text-[#f15b22]">
        <Link className="flex items-center gap-0" href="#">
          <CloudWorkerIcon />
          <CloudWorkerText />
        </Link>
        <nav className="dark:invert hidden md:flex items-center gap-6">
          <Link className="hover:underline" href="https://minatokens.com">
            MinaTokens
          </Link>
          <Link
            className="hover:underline"
            href="https://docs.zkcloudworker.com"
          >
            Docs
          </Link>
          <Link className="hover:underline" href="https://zkcloudworker.com">
            Login
          </Link>
        </nav>
        <Button className="md:hidden" size="icon" variant="ghost">
          <MenuIcon className="w-6 h-6" />
        </Button>
      </header>
      <main className="container mx-auto py-8 px-4 md:px-6">
        <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-4 mb-6">
          <h1 className="text-2xl font-bold">Proof Generation Jobs</h1>
          <form className="w-1/2" onSubmit={handleFormSubmit}>
            <div className="relative">
              <SearchIcon className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-500" />
              <Input
                className="pl-10 pr-4 py-2 rounded-md bg-gray-100 text-gray-900 focus:bg-white focus:ring-2 focus:ring-gray-500 focus:outline-none dark:bg-gray-800 dark:text-gray-100 dark:focus:bg-gray-700"
                placeholder="Search by Job ID, repo, metadata, or status"
                value={searchQuery}
                type="search"
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
          </form>
        </div>
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Time</TableHead>
                <TableHead>Chain</TableHead>
                <TableHead>Job ID</TableHead>
                <TableHead>Repo</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Metadata</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {hits.map((item) => (
                <TableRow
                  className="hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
                  key={item.jobId}
                >
                  <TableCell>
                    <time>{new Date(item.timeCreated).toLocaleString()}</time>
                  </TableCell>
                  <TableCell>{item.chain}</TableCell>
                  <TableCell className="font-medium">
                    <Link
                      className="hover:underline"
                      target="_blank"
                      href={"https://zkcloudworker.com/job/" + item.jobId}
                    >
                      {item.jobId}
                    </Link>
                  </TableCell>
                  <TableCell>{item.repo}</TableCell>
                  <TableCell>
                    {item.jobStatus === "finished" && (
                      <Badge
                        className="bg-green-500 text-white"
                        variant="outline"
                      >
                        <CheckIcon className="w-4 h-4 mr-2" />
                        Finished
                      </Badge>
                    )}
                    {item.jobStatus === "started" && (
                      <Badge
                        className="bg-yellow-500 text-white"
                        variant="outline"
                      >
                        <PlayIcon className="w-4 h-4 mr-2" />
                        Started
                      </Badge>
                    )}
                    {item.jobStatus === "failed" && (
                      <Badge
                        className="bg-red-500 text-white"
                        variant="outline"
                      >
                        <XIcon className="w-4 h-4 mr-2" />
                        Failed
                      </Badge>
                    )}
                    {item.jobStatus === "created" && (
                      <Badge
                        className="bg-blue-500 text-white"
                        variant="outline"
                      >
                        <PlusIcon className="w-4 h-4 mr-2" />
                        Created
                      </Badge>
                    )}
                    {item.jobStatus === "used" && (
                      <Badge
                        className="bg-green-800 text-white"
                        variant="outline"
                      >
                        <DoubleCheckIcon className="w-4 h-4 mr-2" />
                        Used
                      </Badge>
                    )}
                  </TableCell>
                  <TableCell>
                    <TooltipProvider>
                      <Tooltip>
                        <span className="truncate">{item.metadata}</span>
                      </Tooltip>
                    </TooltipProvider>
                  </TableCell>
                </TableRow>
              ))}
              {/*}
              <TableRow className="hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
                <TableCell>
                  <time dateTime="2023-05-25T09:15:30Z" title="" />
                </TableCell>
                <TableCell className="font-medium">def456</TableCell>
                <TableCell>another/repo</TableCell>
                <TableCell>
                  <Badge className="bg-yellow-500 text-white" variant="outline">
                    <PlayIcon className="w-4 h-4 mr-2" />
                    Started
                  </Badge>
                </TableCell>
                <TableCell>
                  <TooltipProvider>
                    <Tooltip>
                      <span className="truncate">This is a string</span>
                    </Tooltip>
                  </TooltipProvider>
                </TableCell>
              </TableRow>
              <TableRow className="hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
                <TableCell>
                  <time dateTime="2023-05-24T16:22:00Z" title="" />
                </TableCell>
                <TableCell className="font-medium">ghi789</TableCell>
                <TableCell>some/repo</TableCell>
                <TableCell>
                  <Badge className="bg-red-500 text-white" variant="outline">
                    <XIcon className="w-4 h-4 mr-2" />
                    Failed
                  </Badge>
                </TableCell>
                <TableCell>
                  <TooltipProvider>
                    <Tooltip>
                      <span className="truncate">This is a string</span>
                    </Tooltip>
                  </TooltipProvider>
                </TableCell>
              </TableRow>
              <TableRow className="hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
                <TableCell>
                  <time dateTime="2023-05-23T11:45:15Z" title="" />
                </TableCell>
                <TableCell className="font-medium">jkl012</TableCell>
                <TableCell>other/repo</TableCell>
                <TableCell>
                  <Badge className="bg-blue-500 text-white" variant="outline">
                    <PlusIcon className="w-4 h-4 mr-2" />
                    Created
                  </Badge>
                </TableCell>
                <TableCell>
                  <TooltipProvider>
                    <Tooltip>
                      <span className="truncate">This is a string</span>
                    </Tooltip>
                  </TooltipProvider>
                </TableCell>
              </TableRow>
              <TableRow className="hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
                <TableCell>
                  <time dateTime="2023-05-22T14:03:45Z" title="" />
                </TableCell>
                <TableCell className="font-medium">mno345</TableCell>
                <TableCell>new/repo</TableCell>
                <TableCell>
                  <Badge className="bg-green-800 text-white" variant="outline">
                    <DoubleCheckIcon className="w-4 h-4 mr-2" />
                    Used
                  </Badge>
                </TableCell>
                <TableCell>
                  <TooltipProvider>
                    <Tooltip>
                      <span className="truncate">This is a string</span>
                    </Tooltip>
                  </TooltipProvider>
                </TableCell>
              </TableRow>
            */}
            </TableBody>
          </Table>
        </div>
        <div>
          <PagesList
            hitsPerPage={hitsPerPage}
            currentPage={currentPage}
            totalPages={totalPages}
            pageSizes={pageSizes}
            totalHits={totalHits}
            onChangeHitsPerPage={onChangeHitsPerPage}
            onChangePage={onChangePage}
          />
        </div>
      </main>
    </>
  );
}

function CheckIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M20 6 9 17l-5-5" />
    </svg>
  );
}

function DoubleCheckIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M20 6L9 17L4 12" /> {/* First checkmark */}
      <path d="M26 6L15 17L10 12" />{" "}
      {/* Second checkmark, adjusted to increase horizontal distance significantly */}
    </svg>
  );
}
function CloudWorkerIcon() {
  return (
    <Image
      src="/zkcloudworker-logo-only.svg"
      alt="zkCloudWorker Logo"
      className="dark:invert"
      width={50}
      height={50}
      priority
    />
  );
}

function CloudWorkerText() {
  return (
    <Image
      src="/zkcloudworker-text-only.svg"
      alt="zkCloudWorker Logo"
      className="dark:invert w-64 h-70 relative object-contain right-10"
      width={250}
      height={50}
      priority
    />
  );
}

function CloudIconOld(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M17.5 19H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z" />
    </svg>
  );
}

function MenuIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="4" x2="20" y1="12" y2="12" />
      <line x1="4" x2="20" y1="6" y2="6" />
      <line x1="4" x2="20" y1="18" y2="18" />
    </svg>
  );
}

function PlayIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="6 3 20 12 6 21 6 3" />
    </svg>
  );
}

function PlusIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  );
}

function SearchIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="11" cy="11" r="8" />
      <path d="m21 21-4.3-4.3" />
    </svg>
  );
}

function XIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  );
}
